
Binary Search Algorithm - What You Need to Use (Based on Your Practice)

To successfully implement Binary Search in JavaScript, you need the following components:

1. âœ… **An Array (Sorted in Ascending Order)**
   - Binary search only works on **sorted arrays**.
   - Example: [1, 2, 3, 4, 5, 6]

2. âœ… **Start and End Pointers**
   - You initialize two variables:
     - `start = 0`
     - `end = arr.length - 1`

3. âœ… **Loop (Recommended: while loop)**
   - You use a `while (start <= end)` loop to repeat the search process.

4. âœ… **Midpoint Calculation**
   - You calculate the middle index on each iteration:
     - `mid = Math.floor((start + end) / 2)`

5. âœ… **Condition Checks (Using if/else)**
   - Compare target with the middle value:
     - If `arr[mid] === target` â†’ return mid (target found)
     - If `arr[mid] < target` â†’ move start to `mid + 1`
     - If `arr[mid] > target` â†’ move end to `mid - 1`

6. âœ… **Return Statement**
   - If the loop ends and target not found â†’ return -1

7. âœ… **Function Parameters (In Best Practice)**
   - `function binarySearch(arr, start, end, target)`

8. âœ… **Optional: Ternary Operator (Advanced Use)**
   - For compact writing, ternary operator can replace if-else

----------------------------------
ðŸ’¡ Summary of Tools/Concepts Used:
- Variables: `start`, `end`, `mid`
- Loop: `while`
- Conditionals: `if`, `else if`, `else`
- Comparison operators: `===`, `<`, `>`
- Return statement
- Function declaration with parameters
